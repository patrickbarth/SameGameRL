import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style


def balanced_results(results, interval=10):
    """Smooth results using a moving average"""
    if len(results) < interval:
        return results

    smoothed = []
    for i in range(len(results)):
        start_idx = max(0, i - interval // 2)
        end_idx = min(len(results), i + interval // 2 + 1)
        smoothed.append(np.mean(results[start_idx:end_idx]))

    return smoothed


def plot_result(results: list[int], interval=10):
    style.use("fivethirtyeight")
    fig, ax = plt.subplots()
    pl_result = balanced_results(results, interval=interval)
    ax.plot(pl_result)
    plt.legend()
    plt.show()


def plot_evals(evals: list[tuple[int, int, int]]):
    style.use("fivethirtyeight")
    fig, ax = plt.subplots()
    evals.sort()
    left, singles_left, reward = list(zip(*evals))
    ax.plot(left, label="cells left")
    ax.plot(singles_left, label="isolated cells left")
    ax.plot(reward, label="total reward gained")
    plt.legend()
    plt.show()


def plot_multiple_training_results(results_dict, labels, interval=10, log_scale=True):
    """Plot training loss curves for multiple agents"""
    style.use("fivethirtyeight")
    fig, ax = plt.subplots(figsize=(12, 8))

    colors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728"]

    for i, (weight, results) in enumerate(results_dict.items()):
        # Apply smoothing using the existing balanced_results function
        smoothed_results = balanced_results(results, interval=interval)

        # Create x-axis based on report frequency
        x_axis = (
            np.arange(len(smoothed_results)) * 100
        )  # Convert to percentage of total training

        ax.plot(
            x_axis,
            smoothed_results,
            label=# f"Singles Weight: {weight}",
            color=colors[i % len(colors)],
            linewidth=2,
        )

    ax.set_xlabel("Training Progress (%)")
    ax.set_ylabel("Average Loss")

    # Set logarithmic scale if requested
    if log_scale:
        ax.set_yscale("log")
        ax.set_title("Training Loss Comparison (Logarithmic Scale)")
    else:
        ax.set_title("Training Loss Comparison")

    ax.legend()
    ax.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.show()
